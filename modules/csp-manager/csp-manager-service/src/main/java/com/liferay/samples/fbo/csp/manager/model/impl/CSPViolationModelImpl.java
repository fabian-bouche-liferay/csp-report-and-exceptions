/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.samples.fbo.csp.manager.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.samples.fbo.csp.manager.model.CSPViolation;
import com.liferay.samples.fbo.csp.manager.model.CSPViolationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CSPViolation service. Represents a row in the &quot;FOO_CSPViolation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CSPViolationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CSPViolationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CSPViolationImpl
 * @generated
 */
public class CSPViolationModelImpl
	extends BaseModelImpl<CSPViolation> implements CSPViolationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a csp violation model instance should use the <code>CSPViolation</code> interface instead.
	 */
	public static final String TABLE_NAME = "FOO_CSPViolation";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"cspViolationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"plid", Types.BIGINT}, {"url", Types.VARCHAR},
		{"violationType", Types.VARCHAR}, {"violation", Types.VARCHAR},
		{"violationHash", Types.VARCHAR}, {"whiteListed", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cspViolationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("plid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("violationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("violation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("violationHash", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("whiteListed", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FOO_CSPViolation (uuid_ VARCHAR(75) null,cspViolationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,plid LONG,url VARCHAR(75) null,violationType VARCHAR(75) null,violation VARCHAR(75) null,violationHash VARCHAR(75) null,whiteListed BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table FOO_CSPViolation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cspViolation.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FOO_CSPViolation.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PLID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long VIOLATIONHASH_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long WHITELISTED_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CSPViolationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cspViolationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCspViolationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cspViolationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CSPViolation.class;
	}

	@Override
	public String getModelClassName() {
		return CSPViolation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CSPViolation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CSPViolation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CSPViolation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CSPViolation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CSPViolation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CSPViolation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CSPViolation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CSPViolation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CSPViolation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CSPViolation, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CSPViolation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<CSPViolation, Object>>();

			attributeGetterFunctions.put("uuid", CSPViolation::getUuid);
			attributeGetterFunctions.put(
				"cspViolationId", CSPViolation::getCspViolationId);
			attributeGetterFunctions.put("groupId", CSPViolation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CSPViolation::getCompanyId);
			attributeGetterFunctions.put("userId", CSPViolation::getUserId);
			attributeGetterFunctions.put("userName", CSPViolation::getUserName);
			attributeGetterFunctions.put(
				"createDate", CSPViolation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CSPViolation::getModifiedDate);
			attributeGetterFunctions.put("plid", CSPViolation::getPlid);
			attributeGetterFunctions.put("url", CSPViolation::getUrl);
			attributeGetterFunctions.put(
				"violationType", CSPViolation::getViolationType);
			attributeGetterFunctions.put(
				"violation", CSPViolation::getViolation);
			attributeGetterFunctions.put(
				"violationHash", CSPViolation::getViolationHash);
			attributeGetterFunctions.put(
				"whiteListed", CSPViolation::getWhiteListed);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<CSPViolation, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CSPViolation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<CSPViolation, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<CSPViolation, String>)CSPViolation::setUuid);
			attributeSetterBiConsumers.put(
				"cspViolationId",
				(BiConsumer<CSPViolation, Long>)
					CSPViolation::setCspViolationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CSPViolation, Long>)CSPViolation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CSPViolation, Long>)CSPViolation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CSPViolation, Long>)CSPViolation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CSPViolation, String>)CSPViolation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CSPViolation, Date>)CSPViolation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CSPViolation, Date>)CSPViolation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"plid", (BiConsumer<CSPViolation, Long>)CSPViolation::setPlid);
			attributeSetterBiConsumers.put(
				"url", (BiConsumer<CSPViolation, String>)CSPViolation::setUrl);
			attributeSetterBiConsumers.put(
				"violationType",
				(BiConsumer<CSPViolation, String>)
					CSPViolation::setViolationType);
			attributeSetterBiConsumers.put(
				"violation",
				(BiConsumer<CSPViolation, String>)CSPViolation::setViolation);
			attributeSetterBiConsumers.put(
				"violationHash",
				(BiConsumer<CSPViolation, String>)
					CSPViolation::setViolationHash);
			attributeSetterBiConsumers.put(
				"whiteListed",
				(BiConsumer<CSPViolation, Boolean>)
					CSPViolation::setWhiteListed);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getCspViolationId() {
		return _cspViolationId;
	}

	@Override
	public void setCspViolationId(long cspViolationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cspViolationId = cspViolationId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getPlid() {
		return _plid;
	}

	@Override
	public void setPlid(long plid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_plid = plid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPlid() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("plid"));
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_url = url;
	}

	@Override
	public String getViolationType() {
		if (_violationType == null) {
			return "";
		}
		else {
			return _violationType;
		}
	}

	@Override
	public void setViolationType(String violationType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_violationType = violationType;
	}

	@Override
	public String getViolation() {
		if (_violation == null) {
			return "";
		}
		else {
			return _violation;
		}
	}

	@Override
	public void setViolation(String violation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_violation = violation;
	}

	@Override
	public String getViolationHash() {
		if (_violationHash == null) {
			return "";
		}
		else {
			return _violationHash;
		}
	}

	@Override
	public void setViolationHash(String violationHash) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_violationHash = violationHash;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalViolationHash() {
		return getColumnOriginalValue("violationHash");
	}

	@Override
	public boolean getWhiteListed() {
		return _whiteListed;
	}

	@Override
	public boolean isWhiteListed() {
		return _whiteListed;
	}

	@Override
	public void setWhiteListed(boolean whiteListed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_whiteListed = whiteListed;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalWhiteListed() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("whiteListed"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CSPViolation.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CSPViolation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CSPViolation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CSPViolation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CSPViolationImpl cspViolationImpl = new CSPViolationImpl();

		cspViolationImpl.setUuid(getUuid());
		cspViolationImpl.setCspViolationId(getCspViolationId());
		cspViolationImpl.setGroupId(getGroupId());
		cspViolationImpl.setCompanyId(getCompanyId());
		cspViolationImpl.setUserId(getUserId());
		cspViolationImpl.setUserName(getUserName());
		cspViolationImpl.setCreateDate(getCreateDate());
		cspViolationImpl.setModifiedDate(getModifiedDate());
		cspViolationImpl.setPlid(getPlid());
		cspViolationImpl.setUrl(getUrl());
		cspViolationImpl.setViolationType(getViolationType());
		cspViolationImpl.setViolation(getViolation());
		cspViolationImpl.setViolationHash(getViolationHash());
		cspViolationImpl.setWhiteListed(isWhiteListed());

		cspViolationImpl.resetOriginalValues();

		return cspViolationImpl;
	}

	@Override
	public CSPViolation cloneWithOriginalValues() {
		CSPViolationImpl cspViolationImpl = new CSPViolationImpl();

		cspViolationImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		cspViolationImpl.setCspViolationId(
			this.<Long>getColumnOriginalValue("cspViolationId"));
		cspViolationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cspViolationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cspViolationImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		cspViolationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cspViolationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cspViolationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cspViolationImpl.setPlid(this.<Long>getColumnOriginalValue("plid"));
		cspViolationImpl.setUrl(this.<String>getColumnOriginalValue("url"));
		cspViolationImpl.setViolationType(
			this.<String>getColumnOriginalValue("violationType"));
		cspViolationImpl.setViolation(
			this.<String>getColumnOriginalValue("violation"));
		cspViolationImpl.setViolationHash(
			this.<String>getColumnOriginalValue("violationHash"));
		cspViolationImpl.setWhiteListed(
			this.<Boolean>getColumnOriginalValue("whiteListed"));

		return cspViolationImpl;
	}

	@Override
	public int compareTo(CSPViolation cspViolation) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), cspViolation.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CSPViolation)) {
			return false;
		}

		CSPViolation cspViolation = (CSPViolation)object;

		long primaryKey = cspViolation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CSPViolation> toCacheModel() {
		CSPViolationCacheModel cspViolationCacheModel =
			new CSPViolationCacheModel();

		cspViolationCacheModel.uuid = getUuid();

		String uuid = cspViolationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cspViolationCacheModel.uuid = null;
		}

		cspViolationCacheModel.cspViolationId = getCspViolationId();

		cspViolationCacheModel.groupId = getGroupId();

		cspViolationCacheModel.companyId = getCompanyId();

		cspViolationCacheModel.userId = getUserId();

		cspViolationCacheModel.userName = getUserName();

		String userName = cspViolationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cspViolationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cspViolationCacheModel.createDate = createDate.getTime();
		}
		else {
			cspViolationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cspViolationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cspViolationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cspViolationCacheModel.plid = getPlid();

		cspViolationCacheModel.url = getUrl();

		String url = cspViolationCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			cspViolationCacheModel.url = null;
		}

		cspViolationCacheModel.violationType = getViolationType();

		String violationType = cspViolationCacheModel.violationType;

		if ((violationType != null) && (violationType.length() == 0)) {
			cspViolationCacheModel.violationType = null;
		}

		cspViolationCacheModel.violation = getViolation();

		String violation = cspViolationCacheModel.violation;

		if ((violation != null) && (violation.length() == 0)) {
			cspViolationCacheModel.violation = null;
		}

		cspViolationCacheModel.violationHash = getViolationHash();

		String violationHash = cspViolationCacheModel.violationHash;

		if ((violationHash != null) && (violationHash.length() == 0)) {
			cspViolationCacheModel.violationHash = null;
		}

		cspViolationCacheModel.whiteListed = isWhiteListed();

		return cspViolationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CSPViolation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CSPViolation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CSPViolation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CSPViolation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CSPViolation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CSPViolation.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _cspViolationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _plid;
	private String _url;
	private String _violationType;
	private String _violation;
	private String _violationHash;
	private boolean _whiteListed;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CSPViolation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CSPViolation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("cspViolationId", _cspViolationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("plid", _plid);
		_columnOriginalValues.put("url", _url);
		_columnOriginalValues.put("violationType", _violationType);
		_columnOriginalValues.put("violation", _violation);
		_columnOriginalValues.put("violationHash", _violationHash);
		_columnOriginalValues.put("whiteListed", _whiteListed);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("cspViolationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("plid", 256L);

		columnBitmasks.put("url", 512L);

		columnBitmasks.put("violationType", 1024L);

		columnBitmasks.put("violation", 2048L);

		columnBitmasks.put("violationHash", 4096L);

		columnBitmasks.put("whiteListed", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CSPViolation _escapedModel;

}